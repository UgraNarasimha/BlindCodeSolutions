{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
\
\
\
3. Contains Duplicate:\
\
public class Solution \{\
    public bool ContainsDuplicate(int[] nums) \{\
        HashSet<int> x = new HashSet<int>();\
            \
            for ( int i=0; i < nums.Length; i++)\
            \{\
                if(x.Contains(nums[i]))\
                    return true;\
                else\
                    x.Add(nums[i]);\
\
            \}\
\
            return false;\
    \}\
\}\
\
4. Product of array but self, without division, prefix, post fix\
\
public class Solution \{\
    public int[] ProductExceptSelf(int[] nums) \{\
        int[] ans = new int[nums.Length];\
\
            for (int i=0;i< ans.Length;i++)\
                ans[i] = 1;\
\
            int prefix = 1;\
\
            for(int i=0;i<nums.Length;i++)\
            \{\
                ans[i] *= prefix;\
                prefix *= nums[i];\
            \}\
\
\
\
            int postfix = 1;\
            for (int i = nums.Length-1; i >= 0; i--)\
            \{\
                ans[i] *= postfix;\
                postfix *= nums[i];\
\
            \}\
\
            \
\
            return ans;\
    \}\
\}}